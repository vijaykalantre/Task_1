# -*- coding: utf-8 -*-
"""simple_crud.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11HXMF_m5yUSXPpgUDnEcDkGNx5OfcqC6
"""

import pandas as pd

# Define your data dictionary
data = {
    'id': [1, 2],
    'date': ['2024-01-01', '2024-01-05'],
    'customer': ['John', 'Alice'],
    'product': ['Laptop', 'Keyboard'],
    'quantity': [1, 2],
    'price': [50000, 1500]
}

# Create DataFrame
df = pd.DataFrame(data)

# Save to CSV
df.to_csv('sales.csv', index=False)

print("✅ sales.csv file created successfully!")

#Read All Records
def read_all():
    df = pd.read_csv('sales.csv')
    print(df)

print(df)

#Create  Record
def create():
    df = pd.read_csv('sales.csv')

    # Take user input for the new record
    new_id = int(input("Enter ID: "))
    date = input("Enter Date (YYYY-MM-DD): ")
    customer = input("Enter Customer Name: ")
    product = input("Enter Product: ")
    quantity = int(input("Enter Quantity: "))
    price = float(input("Enter Price: "))

    # Store the new record as a dictionary
    new_record = {
        'id': new_id,
        'date': date,
        'customer': customer,
        'product': product,
        'quantity': quantity,
        'price': price
    }

    # Convert the dictionary to a single-row DataFrame
    new_df = pd.DataFrame([new_record])

    #Combine (concatenate) the new row with the existing data
    df = pd.concat([df, new_df], ignore_index=True)

    # Step 6: Save the updated DataFrame back to the CSV
    df.to_csv('sales.csv', index=False)

    print("✅ Record added.")

#Update Record
def update():
  #Load existing sales data from CSV
    df = pd.read_csv('sales.csv')

    # Ask the user for the record ID to update
    record_id = int(input("Enter ID to update: "))

    # Check if the entered ID exists in the DataFrame
    if record_id in df['id'].values:

      # ind the index (row number) of the record with the matching ID
        idx = df[df['id'] == record_id].index[0]

        #Show the existing data for that ID
        print("Old Record:\n", df.loc[idx])

        #  Ask user for new values and update each column
        df.at[idx, 'date'] = input("New Date: ")
        df.at[idx, 'customer'] = input("New Customer: ")
        df.at[idx, 'product'] = input("New Product: ")
        df.at[idx, 'quantity'] = int(input("New Quantity: "))
        df.at[idx, 'price'] = float(input("New Price: "))

         #Save the updated DataFrame back to the CSV file
        df.to_csv('sales.csv', index=False)
        print("✅ Record updated.")
    else:
        print("❌ Record not found.")

#Delete Record
def delete():
  #Load the sales data from the CSV file
    df = pd.read_csv('sales.csv')

    #  Ask the user to enter the ID of the record they want to delete
    record_id = int(input("Enter ID to delete: "))

    # Check if the ID exists in the DataFrame
    if record_id in df['id'].values:

       #  Remove the row where 'id' matches the entered ID
        df = df[df['id'] != record_id]

        #Save the updated DataFrame back to the CSV file
        df.to_csv('sales.csv', index=False)

          # Show success message
        print("✅ Record deleted.")
    else:
        print("❌ Record not found.")

read_all()

create()

update()

delete()

read_all()

